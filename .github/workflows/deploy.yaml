name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        poetry-version: [1.1.8]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install project
        run: poetry install
      - name: isort check
        run: poetry run isort -c lexie_cloud
      - name: Static type checking (mypy)
        run: poetry run mypy --install-types --non-interactive --ignore-missing-imports lexie_cloud/
      - name: Static analysis
        run: poetry run pylint --rcfile ./.pylintrc lexie_cloud
      - name: Code Vulnerability Scan (bandit)
        run: poetry run bandit -r lexie_cloud
      - name: Unit tests
        run: poetry run pytest -vv --cov lexie_cloud --cov-report term-missing --cov-report html --html=pytest-report.html --self-contained-html --cov-fail-under 100
      - name: Poetry export
        run: poetry export -f requirements.txt --output requirements.txt
  build:
    
    name: Build Image
    runs-on: ubuntu-latest
    needs:
      - ci
    outputs:
      imagename: ${{ steps.docker_build.outputs.image }}
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

  
    - name: Build, tag, and push image to Amazon ECR
      id: docker_build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lexie-cloud
        IMAGE_TAG: ${{env.GITHUB_RUN_ID}}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_ID .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_ID
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_ID"

  deploy-prod:
    name: Deploy to production
    runs-on: 'ubuntu-latest'
    environment: 'PROD'
    needs: [ci, build]
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition lexie_cloud_bridge_service --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: lexie-cloud
        image: ${{ needs.build.outputs.imagename }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true